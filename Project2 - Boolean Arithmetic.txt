Project 2: Boolean Arithmetic

Background:

The centerpiece of the computer's architecture is the CPU, or Central Processing Unit, and the centerpiece of the CPU is the ALU, or Arithmetic-Logic Unit. In this project you will gradually build a set of chips, culminating in the construction of the ALU chip. All the chips built in this project are standard, except for the aLU itself, which differs from one computer architecture to another.

Objective:

Build all the chips listed below, leading up to an ALU. The only building blocks that you can use are the chips built in Project 1. For each chip you need to build the Vhdl file and the Test script.

Chips:

Chip Name	Description
____________________________________

HalfAdder	Half Adder
FullAdder	Full Adder
Add16		16-bit Adder
Inc16		16-bit incrementer
ALU		Arithmetic Logic Unit

Specifications:

/**
 * HalfAdder
 * Computes the sum of two bits.
 */

CHIP HalfAdder {
    IN a, b;    // 1-bit inputs
    OUT sum,    // Right bit of a + b 
        carry;  // Left bit of a + b

    PARTS:
    // Put you code here:
	Xor(a=a, b=b, out=sum);
	And(a=a, b=b, out=carry);
}

/**
 * FullAdder
 * Computes the sum of three bits.
 */

CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    // Put you code here:
	HalfAdder(a=a, b=b, sum=sum1, carry=carry1);
	HalfAdder(a=sum1, b=c, sum=sum, carry=carry2);
	Or(a=carry1, b=carry2, out=carry);

}

/**
 * Add16
 * Adds two 16-bit values.
 * The most significant carry bit is ignored.
 */

CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
   // Put you code here:
	FullAdder(a=a[0], b=b[0], c=false, sum=out[0], carry=carry1);
	FullAdder(a=a[1], b=b[1], c=carry1, sum=out[1], carry=carry2);
	FullAdder(a=a[2], b=b[2], c=carry2, sum=out[2], carry=carry3);
	FullAdder(a=a[3], b=b[3], c=carry3, sum=out[3], carry=carry4);
	FullAdder(a=a[4], b=b[4], c=carry4, sum=out[4], carry=carry5);
	FullAdder(a=a[5], b=b[5], c=carry5, sum=out[5], carry=carry6);
	FullAdder(a=a[6], b=b[6], c=carry6, sum=out[6], carry=carry7);
	FullAdder(a=a[7], b=b[7], c=carry7, sum=out[7], carry=carry8);
	FullAdder(a=a[8], b=b[8], c=carry8, sum=out[8], carry=carry9);
	FullAdder(a=a[9], b=b[9], c=carry9, sum=out[9], carry=carry10);
	FullAdder(a=a[10], b=b[10], c=carry10, sum=out[10], carry=carry11);
	FullAdder(a=a[11], b=b[11], c=carry11, sum=out[11], carry=carry12);
	FullAdder(a=a[12], b=b[12], c=carry12, sum=out[12], carry=carry13);
	FullAdder(a=a[13], b=b[13], c=carry13, sum=out[13], carry=carry14);
	FullAdder(a=a[14], b=b[14], c=carry14, sum=out[14], carry=carry15);
	FullAdder(a=a[15], b=b[15], c=carry15, sum=out[15], carry=carry);
}

/**
 * Inc16
 * 16-bit incrementer:
 * out = in + 1 (arithmetic addition)
 */

CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
   // Put you code here:
	HalfAdder(a=in[0], b=true, sum=out[0], carry=carry1);
	HalfAdder(a=in[1], b=carry1, sum=out[1], carry=carry2);
	HalfAdder(a=in[2], b=carry2, sum=out[2], carry=carry3);
	HalfAdder(a=in[3], b=carry3, sum=out[3], carry=carry4);
	HalfAdder(a=in[4], b=carry4, sum=out[4], carry=carry5);
	HalfAdder(a=in[5], b=carry5, sum=out[5], carry=carry6);
	HalfAdder(a=in[6], b=carry6, sum=out[6], carry=carry7);
	HalfAdder(a=in[7], b=carry7, sum=out[7], carry=carry8);
	HalfAdder(a=in[8], b=carry8, sum=out[8], carry=carry9);
	HalfAdder(a=in[9], b=carry9, sum=out[9], carry=carry10);
	HalfAdder(a=in[10], b=carry10, sum=out[10], carry=carry11);
	HalfAdder(a=in[11], b=carry11, sum=out[11], carry=carry12);
	HalfAdder(a=in[12], b=carry12, sum=out[12], carry=carry13);
	HalfAdder(a=in[13], b=carry13, sum=out[13], carry=carry14);
	HalfAdder(a=in[14], b=carry14, sum=out[14], carry=carry15);
	HalfAdder(a=in[15], b=carry15, sum=out[15], carry=false);
}

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
	Not16(in=x, out=notX);
	Inc16(in=notX, out=comp2X);
	Add16(a=x, b=comp2X, out=zeroX);
	Mux16(a=x, b=zeroX, sel=zx, out=x1);
	Not16(in=x1, out=notX1);
	Mux16(a=x1, b=notX1, sel=nx, out=x2);
	Not16(in=y, out=notY);
	Inc16(in=notY, out=comp2Y);
	Add16(a=y, b=comp2Y, out=zeroY);
	Mux16(a=y, b=zeroY, sel=zy, out=y1);
	Not16(in=y1, out=notY1);
	Mux16(a=y1, b=notY1, sel=ny, out=y2);
	Add16(a=x2, b=y2, out=sumaX2Y2);
	And16(a=x2, b=y2, out=andX2Y2);
	Mux16(a=andX2Y2, b=sumaX2Y2, sel=f, out=out1);
	Not16(in=out1, out=notOut1);
	Mux16(a=out1, b=notOut1, sel=no, out=out);	
	
}



